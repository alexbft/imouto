// Generated by CoffeeScript 1.12.6
var HIKKA, MAX_PERIOD, SMALL_PERIOD, addMoment, bhToString, calculateBhLevel, getUserId, logger, misc, msgCache, newStats, randomHikka, removeOldMoments, smiles;

logger = require('winston');

msgCache = require('../lib/msg_cache');

misc = require('../lib/misc');

HIKKA = ['хикка', 'омега', 'корзинка', 'сыч', 'ероха', 'сыночка-корзиночка', 'доченька-боченька', 'новичок'];

MAX_PERIOD = 24 * 3600 * 1000;

SMALL_PERIOD = 5 * 60 * 1000;

smiles = {
  sunglasses: String.fromCodePoint(0x1F60E),
  unamused: String.fromCodePoint(0x1F612),
  angry: String.fromCodePoint(0x1F620),
  rage: String.fromCodePoint(0x1F621),
  tengu: String.fromCodePoint(0x1F47A),
  boom: String.fromCodePoint(0x1F4A5)
};

randomHikka = function() {
  return misc.randomChoice(HIKKA);
};

newStats = function(userId) {
  return {
    id: userId,
    tyan: false,
    moments: [],
    status: randomHikka()
  };
};

removeOldMoments = function(stats, now) {
  var m;
  return stats.moments = (function() {
    var i, len, ref, results;
    ref = stats.moments;
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      m = ref[i];
      if (now - m < MAX_PERIOD) {
        results.push(m);
      }
    }
    return results;
  })();
};

addMoment = function(stats, now) {
  removeOldMoments(stats, now);
  return stats.moments.push(now);
};

calculateBhLevel = function(userId, moments, now) {
  var i, len, m, peaks, prev;
  if (userId === 89014714) {
    return 5;
  }
  prev = 0;
  peaks = [];
  for (i = 0, len = moments.length; i < len; i++) {
    m = moments[i];
    if (m - prev > SMALL_PERIOD) {
      peaks.push(1);
    } else {
      peaks[peaks.length - 1] += 1;
    }
    prev = m;
  }
  logger.debug(JSON.stringify(peaks));
  if (peaks.length === 0) {
    return 0;
  } else {
    if (now - prev > SMALL_PERIOD) {
      return peaks.length;
    } else {
      return peaks.length - 1 + peaks[peaks.length - 1];
    }
  }
};

bhToString = function(bh) {
  switch (bh) {
    case 0:
      return {
        icon: smiles.sunglasses,
        text: misc.randomChoice(['спокойствие', 'нирвана', 'будда', 'нулевой'])
      };
    case 1:
      return {
        icon: smiles.unamused,
        text: misc.randomChoice(['покалывание', 'легкий', 'недоволен', 'незначительный'])
      };
    case 2:
      return {
        icon: smiles.angry,
        text: misc.randomChoice(['печёт!', 'раскаляется', 'нешуточный', 'дымится'])
      };
    case 3:
      return {
        icon: smiles.rage,
        text: misc.randomChoice(['адский!', 'страшный!', 'красная тревога!', 'термоядерный!', 'стул плавится!'])
      };
    case 4:
      return {
        icon: smiles.tengu,
        text: misc.randomChoice(['Первая Космическая!', 'Сатанинский!', 'Титанический!', 'Убить Всех Человеков'])
      };
    default:
      return {
        icon: smiles.boom,
        text: 'FFFFUUUUUU!!! ' + smiles.rage + smiles.rage + smiles.rage
      };
  }
};

getUserId = function(msg) {
  var tmp;
  if (msg.reply_to_message != null) {
    tmp = msgCache.tryResolve(msg.reply_to_message);
    if (tmp != null) {
      if (tmp.forward_from != null) {
        return tmp.forward_from.id;
      } else {
        return tmp.from.id;
      }
    } else {
      return msg.from.id;
    }
  } else {
    return msg.from.id;
  }
};

module.exports = {
  name: 'Bugurt',
  pattern: /!(bh|статус|кто|хто|это|тян|кун|бугурт|багор|багет|бомбит|багратион|бамболейло|батруха|баттхерт|бантустан|бранденбург|будапешт|будда|баргест|блюменталь|бакенбард|боль|бубалех|печет|печёт|припекло|пиздец|бля|сука|спок|горит|жжет|жжёт|пригорело|ору|f+u+)(.*)/,
  init: function() {
    var ref;
    return this.stats = (ref = misc.loadJson('bh_stats')) != null ? ref : {};
  },
  onMsg: function(msg) {
    var base, bhLevel, now, ref, ref1, stats, userId;
    if (msg.match[1].toLowerCase() === 'bh') {
      return this.handleAdmin(msg);
    }
    if (msg.match[1].toLowerCase() === 'статус') {
      return this.handleStatus(msg);
    }
    if ((ref = msg.match[1].toLowerCase()) === 'кто' || ref === 'хто') {
      return this.handleWhois(msg);
    }
    if (msg.match[1].toLowerCase() === 'это') {
      return this.handleThisis(msg);
    }
    userId = msg.from.id;
    stats = (base = this.stats)[userId] != null ? base[userId] : base[userId] = newStats(userId);
    if ((msg.match[1].toLowerCase() === 'тян' && stats.tyan) || (msg.match[1].toLowerCase() === 'кун' && !stats.tyan)) {
      return this.report(msg, stats, 0);
    } else {
      now = Date.now();
      if ((ref1 = msg.match[1].toLowerCase()) === 'спок' || ref1 === 'будда') {
        stats.moments = [];
      } else {
        addMoment(stats, now);
      }
      bhLevel = calculateBhLevel(userId, stats.moments, now);
      this.report(msg, stats, bhLevel);
      return misc.saveJson('bh_stats', this.stats);
    }
  },
  report: function(msg, stats, bh, otherUserName) {
    var icon, label, ref, text;
    if (otherUserName == null) {
      otherUserName = null;
    }
    ref = bhToString(bh), icon = ref.icon, text = ref.text;
    label = otherUserName != null ? "Статус " + otherUserName : "Ваш статус";
    return msg.reply(label + ": " + stats.status + "\nУровень бугурта: " + icon + " - " + text);
  },
  handleAdmin: function(msg) {
    var base, id, params, ref, st, tyan;
    if (!this.isSudo(msg)) {
      return;
    }
    params = msg.match[2].substr(1);
    ref = params.split(' '), id = ref[0], st = ref[1], tyan = ref[2];
    if ((base = this.stats)[id] == null) {
      base[id] = newStats(Number(id));
    }
    if (st != null) {
      this.stats[id].status = st;
    }
    if (tyan != null) {
      this.stats[id].tyan = tyan === '1';
    }
    msg.reply("Статус " + id + " обновлён.");
    return misc.saveJson('bh_stats', this.stats);
  },
  handleStatus: function(msg) {
    var base, base1, bhLevel, name, now, stats, userId;
    if ((msg.match[2] != null) && msg.match[2].startsWith(' ')) {
      if (this.isSudo(msg)) {
        userId = getUserId(msg);
      } else {
        userId = msg.from.id;
      }
      stats = (base = this.stats)[userId] != null ? base[userId] : base[userId] = newStats(userId);
      stats.status = msg.match[2].substr(1);
      if (userId === msg.from.id) {
        msg.reply('Ваш статус обновлён.');
      } else {
        name = msgCache.getUserById(userId).first_name;
        msg.reply("Статус " + name + " обновлён.");
      }
      return misc.saveJson('bh_stats', this.stats);
    } else {
      userId = getUserId(msg);
      stats = (base1 = this.stats)[userId] != null ? base1[userId] : base1[userId] = newStats(userId);
      now = Date.now();
      removeOldMoments(stats, now);
      bhLevel = calculateBhLevel(userId, stats.moments, now);
      name = userId !== msg.from.id ? msgCache.getUserById(userId).first_name : null;
      return this.report(msg, stats, bhLevel, name);
    }
  },
  handleWhois: function(msg) {
    var base, name, ref, stats, userId;
    userId = getUserId(msg);
    stats = (base = this.stats)[userId] != null ? base[userId] : base[userId] = newStats(userId);
    if (this.isSudo(msg) && (stats.whoisAdm != null)) {
      name = stats.whoisAdm;
    } else {
      name = (ref = stats.whois) != null ? ref : msgCache.getUserById(userId).first_name;
    }
    if ((name != null) && name !== '') {
      return msg.reply("Это " + name + ", " + stats.status + ".");
    } else {
      return msg.reply("Первый раз вижу...");
    }
  },
  handleThisis: function(msg) {
    var base, stats, userId, whois;
    if (!((msg.match[2] != null) && msg.match[2].startsWith(' '))) {
      return;
    }
    whois = msg.match[2].substr(1);
    userId = getUserId(msg);
    stats = (base = this.stats)[userId] != null ? base[userId] : base[userId] = newStats(userId);
    stats.whois = whois;
    if (this.isSudo(msg)) {
      stats.whoisAdm = whois;
    }
    misc.saveJson('bh_stats', this.stats);
    return msg.reply("Запомнила, это " + whois + ".");
  }
};
