// Generated by CoffeeScript 1.12.6
var configFileName, fs, logger, options, readConfig, split2, toIdList;

fs = require('fs');

logger = require('winston');

configFileName = __dirname + '/../config/main.config';

exports.options = options = {};

split2 = function(line, c) {
  var ii;
  ii = line.indexOf(c);
  if (ii === -1) {
    return [];
  } else {
    return [line.substr(0, ii), line.substr(ii + c.length)];
  }
};

readConfig = function(fileName) {
  var buf, configText, i, j, key, len, line, ref, ref1, results, v;
  configText = fs.readFileSync(fileName, {
    encoding: 'utf8'
  });
  buf = {};
  ref = configText.split('\n');
  for (i = j = 0, len = ref.length; j < len; i = ++j) {
    line = ref[i];
    line = line.trim();
    if (line === '' || line.startsWith('#')) {
      continue;
    }
    ref1 = split2(line, '='), key = ref1[0], v = ref1[1];
    if (key == null) {
      logger.error("Config: Error in line " + (i + 1));
      return;
    }
    key = key.trim();
    v = v.trim();
    buf[key] = v;
  }
  results = [];
  for (key in buf) {
    v = buf[key];
    results.push(options[key] = v);
  }
  return results;
};

toIdList = exports.toIdList = function(s) {
  var id, j, len, ref, results;
  if ((s == null) || s.trim() === '') {
    return [];
  }
  ref = s.split(',');
  results = [];
  for (j = 0, len = ref.length; j < len; j++) {
    id = ref[j];
    results.push(parseInt(id.trim(), 10));
  }
  return results;
};

if (fs.existsSync(configFileName)) {
  readConfig(configFileName);
}

exports.sudoList = toIdList(options.sudo);

exports.bannedIds = toIdList(options.banned);

exports.setUserInfo = function(info) {
  logger.info("Our id is: " + info.id);
  exports.userId = info.id;
  return exports.userName = info.username;
};
