// Generated by CoffeeScript 1.12.4
var MOON, QUOTE_MERGE_TIMEOUT, TOP_AUTHORS, _getByOwnerId, fn, fromMsg, fs, getByNumber, getByNumberPlusAll, getByTextAll, getLastNum, getNextNum, getRandomAll, getRating, getSenders, getUserNameById, hasSender, hasText, initialized, lastMsg, lastQuote, lastUsersUpdate, loadVotes, logger, maybeSaveVotes, misc, msgCache, quotes, saveQuotes, saveVotes, saveVotesTimer, votes;

logger = require('winston');

fs = require('fs');

misc = require('./misc');

msgCache = require('./msg_cache');

exports.QUOTE_MERGE_TIMEOUT = QUOTE_MERGE_TIMEOUT = 10000;

exports.THUMBS_UP = String.fromCodePoint(0x1f44d) + String.fromCodePoint(0x1f3fb);

exports.THUMBS_DOWN = String.fromCodePoint(0x1f44e) + String.fromCodePoint(0x1f3fb);

quotes = [];

initialized = false;

fn = null;

lastMsg = {};

votes = {};

lastQuote = {};

exports.init = function() {
  var content;
  if (!initialized) {
    fn = __dirname + '/../data/quotes3.txt';
    if (fs.existsSync(fn)) {
      content = fs.readFileSync(fn);
      quotes = JSON.parse(content);
    }
    loadVotes();
    initialized = true;
  }
};

loadVotes = function() {
  var ref;
  return votes = (ref = misc.loadJson('quote_votes')) != null ? ref : {};
};

saveVotesTimer = null;

maybeSaveVotes = function() {
  if (saveVotesTimer == null) {
    return saveVotesTimer = setTimeout(saveVotes, 10000);
  }
};

saveVotes = function() {
  saveVotesTimer = null;
  logger.debug('Saving votes...');
  return misc.saveJson('quote_votes', votes);
};

getNextNum = function() {
  var maxNum;
  if (quotes.length === 0) {
    return 1;
  } else {
    maxNum = Math.max.apply(Math, quotes.map(function(q) {
      return q.num;
    }));
    return maxNum + 1;
  }
};

getLastNum = exports.getLastNum = function() {
  return getNextNum() - 1;
};

fromMsg = function(msg) {
  var ref, ref1;
  return {
    id: msg.message_id,
    text: msg.text,
    sender: (ref = (ref1 = msg.forward_from) != null ? ref1.id : void 0) != null ? ref : msg.from.id,
    sender_name: msg.forward_from != null ? misc.fullName(msg.forward_from) : misc.fullName(msg.from),
    chat_id: msg.chat.id,
    date: msg.date * 1000
  };
};

exports.getUserNameById = getUserNameById = function(userId) {
  var l, len1, len2, m, n, q, ref, user;
  if (global.userNameHack(userId) != null) {
    return global.userNameHack(userId);
  }
  user = msgCache.getUserById(userId);
  if (user != null) {
    return misc.fullName(user);
  } else {
    for (l = 0, len1 = quotes.length; l < len1; l++) {
      q = quotes[l];
      if (q.messages != null) {
        ref = q.messages;
        for (n = 0, len2 = ref.length; n < len2; n++) {
          m = ref[n];
          if (m.sender === userId) {
            return m.sender_name;
          }
        }
      }
    }
    return null;
  }
};

exports.add = function(msg, posterId) {
  var date, i, ii, isComplex, isMatch, j, l, len1, len2, len3, len4, mm, msgI, n, num, o, oldQuote, oldQuoteIndex, oldQuoteNum, p, q, qmsg, quote, quotemsg, r, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9;
  if (!initialized) {
    throw new Error("not initialized");
  }
  num = getNextNum();
  date = Date.now();
  quote = {
    num: num,
    version: 5,
    posterId: posterId,
    posterName: getUserNameById(posterId),
    date: date,
    messages: [fromMsg(msg)]
  };
  if (msg.reply_to_message != null) {
    quote.messages.unshift(fromMsg(msg.reply_to_message));
  }
  ii = -1;
  isComplex = false;
  if ((((ref = lastMsg[posterId]) != null ? ref.date : void 0) != null) && date - lastMsg[posterId].date < QUOTE_MERGE_TIMEOUT) {
    oldQuoteNum = lastMsg[posterId].quoteNum;
    oldQuoteIndex = -1;
    for (i = l = 0, len1 = quotes.length; l < len1; i = ++l) {
      q = quotes[i];
      if (q.num === oldQuoteNum) {
        oldQuote = q;
        oldQuoteIndex = i;
        break;
      }
    }
    if (oldQuoteIndex !== -1) {
      quote.num = oldQuoteNum;
      quote.messages = oldQuote.messages.concat(quote.messages);
      isComplex = true;
    }
  }
  msgI = quote.messages.length - 1;
  for (i = n = 0, len2 = quotes.length; n < len2; i = ++n) {
    q = quotes[i];
    if ((q.version == null) || q.version < 3) {
      if (q.reply_text != null) {
        isMatch = quote.messages.length === 2 && q.sender === quote.messages[1].sender && ((ref1 = q.text) != null ? ref1 : null) === ((ref2 = quote.messages[1].text) != null ? ref2 : null) && ((ref3 = q.reply_text) != null ? ref3 : null) === ((ref4 = quote.messages[0].text) != null ? ref4 : null);
      } else {
        isMatch = quote.messages.length === 1 && q.sender === quote.messages[0].sender && ((ref5 = q.text) != null ? ref5 : null) === ((ref6 = quote.messages[0].text) != null ? ref6 : null);
      }
    } else {
      isMatch = q.messages.length === quote.messages.length;
      if (isMatch) {
        ref7 = q.messages;
        for (j = o = 0, len3 = ref7.length; o < len3; j = ++o) {
          qmsg = ref7[j];
          quotemsg = quote.messages[j];
          if (!((q.version < 5 || (qmsg.text != null)) && qmsg.text === quotemsg.text && qmsg.sender === quotemsg.sender)) {
            isMatch = false;
            break;
          }
        }
      }
    }
    if (isMatch) {
      logger.info("Duplicate quote: " + q.num);
      if (q.version === 5) {
        if (q.posterId === posterId) {
          lastMsg[posterId] = {
            date: quote.date,
            quoteNum: q.num
          };
        }
        return q.num;
      } else {
        ii = i;
        break;
      }
    }
  }
  if (ii !== -1) {
    quote.num = quotes[ii].num;
    if (quotes[ii].saved_name != null) {
      ref8 = quote.messages;
      for (p = 0, len4 = ref8.length; p < len4; p++) {
        mm = ref8[p];
        mm.saved_name = quotes[ii].saved_name;
      }
    }
    if (quotes[ii].messages != null) {
      for (msgI = r = 0, ref9 = quotes[ii].messages.length; 0 <= ref9 ? r < ref9 : r > ref9; msgI = 0 <= ref9 ? ++r : --r) {
        if (quotes[ii].messages[msgI].saved_name != null) {
          quote.messages[msgI].saved_name = quotes[ii].messages[msgI].saved_name;
        }
      }
    }
    quotes[ii] = quote;
    if (isComplex && quotes.length - oldQuoteIndex <= 2) {
      quotes = (function() {
        var len5, results, s;
        results = [];
        for (s = 0, len5 = quotes.length; s < len5; s++) {
          q = quotes[s];
          if (q.num !== oldQuoteNum) {
            results.push(q);
          }
        }
        return results;
      })();
    }
  } else {
    if (isComplex) {
      quotes[oldQuoteIndex] = quote;
    } else {
      quotes.push(quote);
    }
  }
  lastMsg[posterId] = {
    date: quote.date,
    quoteNum: quote.num
  };
  saveQuotes();
  return quote.num;
};

exports.getByNumber = getByNumber = function(num) {
  var q;
  return ((function() {
    var l, len1, results;
    results = [];
    for (l = 0, len1 = quotes.length; l < len1; l++) {
      q = quotes[l];
      if (q.num === num) {
        results.push(q);
      }
    }
    return results;
  })())[0];
};

hasText = function(q, lookFor) {
  if ((q.version == null) || q.version < 3) {
    return (q.text != null) && q.text.toLowerCase().indexOf(lookFor) !== -1 || (q.sender_name != null) && q.sender_name.toLowerCase().indexOf(lookFor) !== -1 || (q.saved_name != null) && q.saved_name.toLowerCase().indexOf(lookFor) !== -1 || (q.reply_text != null) && q.reply_text.toLowerCase().indexOf(lookFor) !== -1 || (q.reply_sender_name != null) && q.reply_sender_name.toLowerCase().indexOf(lookFor) !== -1;
  } else {
    return q.messages.some(function(m) {
      return (m.text != null) && m.text.toLowerCase().indexOf(lookFor) !== -1 || (m.sender_name != null) && m.sender_name.toLowerCase().indexOf(lookFor) !== -1 || (m.saved_name != null) && m.saved_name.toLowerCase().indexOf(lookFor) !== -1;
    });
  }
};

exports.getByTextAll = getByTextAll = function(text, ownerId) {
  var lookFor, q, qq;
  lookFor = text.toLowerCase();
  qq = (function() {
    var l, len1, results;
    results = [];
    for (l = 0, len1 = quotes.length; l < len1; l++) {
      q = quotes[l];
      if (hasText(q, lookFor)) {
        results.push(q);
      }
    }
    return results;
  })();
  if (ownerId != null) {
    qq = _getByOwnerId(qq, ownerId);
  }
  return qq;
};

exports.getByText = function(text, ownerId) {
  return misc.randomChoice(getByTextAll(text, ownerId));
};

hasSender = function(q, ownerId) {
  if ((q.version == null) || q.version < 3) {
    return q.sender === ownerId || q.reply_sender === ownerId;
  } else {
    return q.messages.some(function(m) {
      return m.sender === ownerId;
    });
  }
};

getSenders = function(q) {
  var dict, k, l, len1, msg, name1, name2, ref, ref1, ref2, results, v;
  dict = {};
  if ((q.version == null) || q.version < 3) {
    if (q.sender != null) {
      if (dict[name1 = q.sender] == null) {
        dict[name1] = (ref = q.saved_name) != null ? ref : q.sender_name;
      }
    }
    if (q.reply_sender != null) {
      if (dict[name2 = q.reply_sender] == null) {
        dict[name2] = q.reply_sender_name;
      }
    }
  } else {
    ref1 = q.messages;
    for (l = 0, len1 = ref1.length; l < len1; l++) {
      msg = ref1[l];
      dict[msg.sender] = (ref2 = msg.saved_name) != null ? ref2 : msg.sender_name;
    }
  }
  results = [];
  for (k in dict) {
    v = dict[k];
    results.push(v);
  }
  return results;
};

_getByOwnerId = function(quotes, ownerId) {
  var l, len1, q, results;
  results = [];
  for (l = 0, len1 = quotes.length; l < len1; l++) {
    q = quotes[l];
    if (hasSender(q, ownerId)) {
      results.push(q);
    }
  }
  return results;
};

exports.getByOwnerIdAll = function(ownerId) {
  return _getByOwnerId(quotes, ownerId);
};

exports.getByOwnerId = function(ownerId) {
  return misc.randomChoice(_getByOwnerId(quotes, ownerId));
};

exports.getRandomAll = getRandomAll = function(arg) {
  var l, len1, onlyPositive, q, results;
  onlyPositive = (arg != null ? arg : {}).onlyPositive;
  if (onlyPositive) {
    results = [];
    for (l = 0, len1 = quotes.length; l < len1; l++) {
      q = quotes[l];
      if (getRating(q.num) > 0) {
        results.push(q);
      }
    }
    return results;
  } else {
    return quotes;
  }
};

exports.getRandom = function(settings) {
  return misc.randomChoice(getRandomAll(settings));
};

lastUsersUpdate = null;

exports.updateUsers = function() {
  var l, len1, len2, msg, n, quote, ref, updates, user, userName;
  if ((lastUsersUpdate != null) && Date.now() - lastUsersUpdate < 10000) {
    return;
  }
  lastUsersUpdate = Date.now();
  updates = {};
  for (l = 0, len1 = quotes.length; l < len1; l++) {
    quote = quotes[l];
    if ((quote.version == null) || quote.version <= 2) {
      if (quote.sender != null) {
        user = msgCache.getUserById(quote.sender);
        if (user != null) {
          userName = misc.fullName(user);
          if (userName !== quote.sender_name) {
            if (!quote.sender in updates) {
              updates[quote.sender] = true;
              logger.info("Quotes: user " + quote.sender + " changed name to " + userName + ".");
            }
            if (userName === 'Unknown' || userName === '') {
              if (quote.sender_name !== 'Unknown' && quote.sender_name !== '') {
                quote.saved_name = quote.sender_name;
              }
            }
            quote.sender_name = userName;
          }
        }
      }
      if (quote.reply_sender != null) {
        user = msgCache.getUserById(quote.reply_sender);
        if (user != null) {
          userName = misc.fullName(user);
          if (userName !== quote.reply_sender_name) {
            if (!quote.reply_sender in updates) {
              updates[quote.reply_sender] = true;
              logger.info("Quotes: user " + quote.reply_sender + " changed name to " + userName + ".");
            }
            quote.reply_sender_name = userName;
          }
        }
      }
    } else if (quote.version >= 3) {
      if ((quote.posterId != null) && (quote.posterName == null)) {
        quote.posterName = getUserNameById(quote.posterId);
      }
      ref = quote.messages;
      for (n = 0, len2 = ref.length; n < len2; n++) {
        msg = ref[n];
        if (msg.sender != null) {
          user = msgCache.getUserById(msg.sender);
          if (user != null) {
            userName = misc.fullName(user);
            if (userName !== msg.sender_name) {
              if (!msg.sender in updates) {
                updates[msg.sender] = true;
                logger.info("Quotes: user " + msg.sender + " changed name to " + userName + ".");
              }
              if (userName === 'Unknown' || userName === '') {
                if (msg.sender_name !== 'Unknown' && msg.sender_name !== '') {
                  msg.saved_name = msg.sender_name;
                }
              }
              msg.sender_name = userName;
            }
          }
        }
      }
    }
  }
  if (Object.keys(updates).length > 0) {
    saveQuotes();
  }
};

exports.setSavedName = function(userId, name) {
  var l, len1, len2, msg, n, q, ref;
  for (l = 0, len1 = quotes.length; l < len1; l++) {
    q = quotes[l];
    if (q.messages != null) {
      ref = q.messages;
      for (n = 0, len2 = ref.length; n < len2; n++) {
        msg = ref[n];
        if (msg.sender === userId) {
          msg.saved_name = name;
        }
      }
    }
  }
  saveQuotes();
};

saveQuotes = function() {
  return fs.writeFileSync(fn, JSON.stringify(quotes));
};

exports.delQuote = function(num) {
  var q;
  quotes = (function() {
    var l, len1, results;
    results = [];
    for (l = 0, len1 = quotes.length; l < len1; l++) {
      q = quotes[l];
      if (q.num !== num) {
        results.push(q);
      }
    }
    return results;
  })();
  saveQuotes();
  if (votes[num] != null) {
    delete votes[num];
    maybeSaveVotes();
  }
};

exports.getByNumberPlusAll = getByNumberPlusAll = function(num) {
  var l, len1, q, results;
  results = [];
  for (l = 0, len1 = quotes.length; l < len1; l++) {
    q = quotes[l];
    if (q.num >= num) {
      results.push(q);
    }
  }
  return results;
};

exports.getByNumberPlus = function(num) {
  return misc.randomChoice(getByNumberPlusAll(num));
};

MOON = String.fromCodePoint(0x1F31D);

TOP_AUTHORS = 10;

exports.getStats = function(ownerId, query) {
  var a, aus, authorScore, authorTuples, authors, k, l, len, len1, len2, lookFor, n, q, qq, ref, userName, v;
  if (ownerId != null) {
    userName = getUserNameById(ownerId);
    len = _getByOwnerId(quotes, ownerId).length;
    return userName + ": " + MOON + " " + len + " " + MOON + " цитат";
  } else if ((query == null) || query.trim() === '') {
    authors = {};
    for (l = 0, len1 = quotes.length; l < len1; l++) {
      q = quotes[l];
      aus = getSenders(q);
      for (n = 0, len2 = aus.length; n < len2; n++) {
        a = aus[n];
        if (a !== '') {
          authors[a] = ((ref = authors[a]) != null ? ref : 0) + 1;
        }
      }
    }
    authorTuples = (function() {
      var results;
      results = [];
      for (k in authors) {
        v = authors[k];
        results.push([k, v]);
      }
      return results;
    })();
    authorTuples.sort(function(arg, arg1) {
      var k1, k2, v1, v2;
      k1 = arg[0], v1 = arg[1];
      k2 = arg1[0], v2 = arg1[1];
      return v2 - v1;
    });
    authorScore = (function() {
      var len3, o, ref1, ref2, results;
      ref1 = authorTuples.slice(0, TOP_AUTHORS);
      results = [];
      for (o = 0, len3 = ref1.length; o < len3; o++) {
        ref2 = ref1[o], a = ref2[0], v = ref2[1];
        results.push(a + " " + MOON + " " + v + " " + MOON);
      }
      return results;
    })();
    return ("Всего цитат: " + quotes.length + "\nПоследняя цитата: " + (getNextNum() - 1) + "\n\nTop " + TOP_AUTHORS + " авторов:\n") + authorScore.join("\n");
  } else {
    lookFor = query.toLowerCase();
    qq = (function() {
      var len3, o, results;
      results = [];
      for (o = 0, len3 = quotes.length; o < len3; o++) {
        q = quotes[o];
        if (hasText(q, lookFor)) {
          results.push(q);
        }
      }
      return results;
    })();
    return "Цитат с упоминанием '" + query + "': " + qq.length;
  }
};

exports.setLastQuote = function(chatId, quoteNum) {
  lastQuote[chatId] = {
    num: quoteNum,
    date: Date.now()
  };
};

exports.vote = function(num, chatId, userId, isUp) {
  var lastQuoteTime, points, ref, ref1;
  if (num != null) {
    if (getByNumber(num) == null) {
      return null;
    }
  } else {
    num = (ref = lastQuote[chatId]) != null ? ref.num : void 0;
    lastQuoteTime = (ref1 = lastQuote[chatId]) != null ? ref1.date : void 0;
    if (!((lastQuoteTime != null) && Date.now() - lastQuoteTime < 1000 * 60 * 5)) {
      return null;
    }
  }
  points = isUp ? 1 : -1;
  logger.info("User " + userId + " voted " + points + " for quote #" + num + ".");
  if (votes[num] == null) {
    votes[num] = {};
  }
  if (votes[num][userId] !== points) {
    votes[num][userId] = points;
    maybeSaveVotes();
    return num;
  } else {
    return null;
  }
};

exports.getRating = getRating = function(quoteNum) {
  var k, rating, ref, v;
  rating = 0;
  if (votes[quoteNum] != null) {
    ref = votes[quoteNum];
    for (k in ref) {
      v = ref[k];
      rating += v;
    }
  }
  return rating;
};
