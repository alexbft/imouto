// Generated by CoffeeScript 1.12.6
var Plugin, fs, logger, misc, pq;

fs = require('fs');

logger = require('winston');

misc = require('./lib/misc');

pq = require('./lib/promise');

module.exports = Plugin = (function() {
  function Plugin(bot) {
    var ref;
    this.bot = bot;
    this.pattern = null;
    this.name = null;
    this.isPrivileged = false;
    this.warnPrivileged = true;
    this.isConf = false;
    this.isAcceptFwd = false;
    this.sentFiles = (ref = misc.loadJson('sentFiles')) != null ? ref : {};
  }

  Plugin.prototype.fixPattern = function(pat, onlyBeginning) {
    var src;
    if (onlyBeginning == null) {
      onlyBeginning = false;
    }
    src = pat.source.replace(/\\b/g, '(?:^|$|\\W)').replace(/\\w/g, '[a-zA-Zа-яА-Я0-9]').replace(/\\W/g, '[^a-zA-Zа-яА-Я0-9]');
    if (onlyBeginning) {
      src = '^' + src;
    }
    return new RegExp(src, 'i');
  };

  Plugin.prototype._init = function() {
    logger.info("Initializing: " + this.name);
    if (this.pattern != null) {
      this.pattern = this.fixPattern(this.pattern, true);
    }
    return this.init();
  };

  Plugin.prototype.init = function() {};

  Plugin.prototype.isAcceptMsg = function(msg) {
    return this.matchPattern(msg, msg.text);
  };

  Plugin.prototype._onMsg = function(msg) {
    var e, safe;
    try {
      safe = this.makeSafe(msg);
      return this.onMsg(msg, safe);
    } catch (error) {
      e = error;
      return this._onError(msg, e);
    }
  };

  Plugin.prototype.onMsg = function(msg, safe) {};

  Plugin.prototype._onError = function(msg, e) {
    logger.warn(e.stack);
    return this.onError(msg, e);
  };

  Plugin.prototype.onError = function(msg, e) {};

  Plugin.prototype.matchPattern = function(msg, text) {
    msg.match = this.matchPatternReal(text, this.pattern);
    return msg.match != null;
  };

  Plugin.prototype.matchPatternReal = function(text, pattern) {
    if ((text == null) || (pattern == null)) {
      return null;
    } else {
      return pattern.exec(text);
    }
  };

  Plugin.prototype.isSudo = function(msg) {
    return this.bot.isSudo(msg);
  };

  Plugin.prototype.checkSudo = function(msg) {
    if (!this.isSudo(msg)) {
      logger.info("Sudo failed");
      if (this.warnPrivileged) {
        msg.reply("You are not my master!");
      }
      return false;
    } else {
      return true;
    }
  };

  Plugin.prototype.makeSafe = function(msg) {
    return (function(_this) {
      return function(promise) {
        return promise["else"](function(err) {
          return _this._onError(msg, err);
        });
      };
    })(this);
  };

  Plugin.prototype.sendImageFromUrl = function(msg, url, options) {
    return misc.download(url).then(function(res) {
      return msg.sendPhoto(res, options);
    }, function(err) {
      logger.warn(err);
      return msg.send("Не загружается: " + url);
    });
  };

  Plugin.prototype.sendAudioFromFile = function(msg, fn, options) {
    var df;
    df = new pq.Deferred;
    fs.readFile(fn, function(err, data) {
      if (err) {
        return df.reject(err);
      } else {
        return msg.sendAudio(data, options).then(function(res) {
          return df.resolve(res);
        }, function(err) {
          return df.reject(err);
        });
      }
    });
    return df.promise;
  };

  Plugin.prototype.sendVoiceFromFile = function(msg, fn, options) {
    var df;
    df = new pq.Deferred;
    fs.readFile(fn, function(err, data) {
      if (err) {
        return df.reject(err);
      } else {
        return msg.sendVoice(data, options).then(function(res) {
          return df.resolve(res);
        }, function(err) {
          return df.reject(err);
        });
      }
    });
    return df.promise;
  };

  Plugin.prototype.sendStickerFromFile = function(msg, fn, options) {
    var df;
    if (!(fn in this.sentFiles)) {
      df = new pq.Deferred;
      fs.readFile(fn, (function(_this) {
        return function(err, data) {
          if (err) {
            return df.reject(err);
          } else {
            return msg.sendStickerFile(fn, data, options).then(function(res) {
              _this.sentFiles[fn] = res.sticker.file_id;
              misc.saveJson('sentFiles', _this.sentFiles);
              return df.resolve(res);
            }, function(err) {
              return df.reject(err);
            });
          }
        };
      })(this));
      return df.promise;
    } else {
      logger.debug("Sent: " + fn + " - " + this.sentFiles[fn]);
      return msg.sendStickerId(fn, this.sentFiles[fn], options);
    }
  };

  Plugin.prototype.trigger = function(msg, text) {
    return this.bot.trigger(msg, text);
  };

  return Plugin;

})();
